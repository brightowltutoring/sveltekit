function m(...e){const a=e.length;return a?({event:r,resolve:n})=>{return s(0,r,{});function s(o,f,c){const g=e[o];return g({event:f,resolve:(u,i)=>{const l=async({html:t,done:p})=>(i?.transformPageChunk&&(t=await i.transformPageChunk({html:t,done:p})??""),c?.transformPageChunk&&(t=await c.transformPageChunk({html:t,done:p})??""),t);return o<a-1?s(o+1,u,{transformPageChunk:l}):n(u,{transformPageChunk:l})}})}}:({event:r,resolve:n})=>n(r)}const y=new Map([["screenshare","classroom"]]);async function h({event:e,resolve:a}){for(const[r,n]of y)if(e.url.pathname===`/${r}`)return Response.redirect(`${e.url.origin}/${n}`,301);return await a(e)}async function k({event:e,resolve:a}){return await a(e,{transformPageChunk:({html:r})=>r.replace(/<link\s+rel="canonical"[^>]*>/,"").replace(/<meta\s+name="description"[^>]*>/,"").replace(/<meta\s+name="keywords"[^>]*>/,"").replace(/<meta\s+property="og:url"[^>]*>/,"").replace(/<meta\s+property="og:title"[^>]*>/,"").replace(/<meta\s+property="og:image"[^>]*>/,"").replace(/<meta\s+property="og:description"[^>]*>/,"")})}const d=m(k,h);export{d as handle,k as metaTagFixWhenSSR,h as redirectOldUrls};
